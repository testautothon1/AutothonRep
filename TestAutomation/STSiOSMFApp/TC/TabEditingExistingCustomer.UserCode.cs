///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;
using AppLayer;
using AppLayer.AppiumService;
using OpenQA.Selenium;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Android;
using OpenQA.Selenium.Appium.iOS;
using OpenQA.Selenium.Appium.Service;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace STSiOSMFApp.TC
{
	public partial class TabEditingExistingCustomer:CommonHelper
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void SwitchAudiogramAvailableinEditScreen(bool on, bool alert)
		{
			string message=null;
			var switchAudiogram=KeywordImplementation.UIObject(By.Id("switchAudiogramEnable"),TimeSpan.FromSeconds(1));
			if((on.Equals(true) && (switchAudiogram.GetAttribute("value").Equals("0") || switchAudiogram.GetAttribute("value").Equals("false"))) ||  (on.Equals(false) && (switchAudiogram.GetAttribute("value").Equals("1") || switchAudiogram.GetAttribute("value").Equals("true"))))
			{
				switchAudiogram.Click();
				message=on?"Switch on the audiogram":"Switch off the audiogram";
				Logger.logInfo(message);
			}
			Logger.logSnapshot();
			if(KeywordImplementation.waitForObjectExist(By.ClassName("UIAAlert"),TimeSpan.FromSeconds(2)))
			{
				if(alert.Equals(true))
				{
					KeywordImplementation.Click(By.Id("OK"));
					Logger.logInfo("OK the alert");
				}
				else
				{
					KeywordImplementation.Click(By.Id("Cancel"));
					Logger.logInfo("Cancel the alert");
				}
			}
		}

		public void ClearDateField()
		{
			Logger.logInfo("Clear the date field");
			KeywordImplementation.Click(By.Id("txtDOB"));
			KeywordImplementation.Click(By.Id("Clear"));
		}

		public void EditPatient(string lastName, string firstName)
		{
			var size=Accessor.getDriver().Manage().Window.Size;
			
			//Swipe from Bottom to Top and Top to bottom
			//Find swipe start and end point from screen's width and height.
			int starty = (int) (size.Height * 0.50);
			int endy = (int) (size.Height*0.20);
			int startx = size.Width / 2;
			
			int count=0;
			while(count!=3 && (!KeywordImplementation.waitForObjectExist(By.Id("txtLastName"),TimeSpan.FromSeconds(1))))
			{
				((IOSDriver<IOSElement>)Accessor.getDriver()).Swipe(startx, starty, startx, endy, 500);
				count++;
			}
			
			Logger.logInfo(string.Format("Edit the patient with info '{0}, {1}'",lastName,firstName));
			KeywordImplementation.TypeText(By.Id("txtLastName"),lastName);
			KeywordImplementation.Click(By.XPath("//UIAWindow[2]//UIAButton[contains(@name,'Done')]"));
			KeywordImplementation.TypeText(By.Id("txtFirstName"),firstName);
			KeywordImplementation.Click(By.XPath("//UIAWindow[2]//UIAButton[contains(@name,'Done')]"));
			//TapOnLeftButton("Press the back key");
		}

		public void ValidateDeleteClientOption()
		{
			var size=Accessor.getDriver().Manage().Window.Size;
			
			/*****************************/
			//Swipe from Bottom to Top
			//Find swipe start and end point from screen's width and height.
			int starty = (int) (size.Height * 0.20);
			int endy = (int) (size.Height*0.50);
			int startx = size.Width / 2;
			
			int count=0;
			while(count!=3 && (!KeywordImplementation.waitForObjectExist(By.Id("Delete Client"),TimeSpan.FromSeconds(1))))
			{
				((IOSDriver<IOSElement>)Accessor.getDriver()).Swipe(startx, endy, startx, starty, 500);
				count++;
			}
			
			if(KeywordImplementation.waitForObjectExist(By.Id("Delete Client"),TimeSpan.FromSeconds(2)))
				Logger.logSuccess("Delete client option exist");
			else
				Logger.logFailure("Delete client option does not exist");
		}

		public void ValidateNotes(string notes)
		{
			KeywordImplementation.Click(By.Id("Notes"));
			if(KeywordImplementation.UIObject(By.Id("Txtnotes"),TimeSpan.FromSeconds(3)).GetAttribute("value").Contains(notes))
				Logger.logSuccess(string.Format("Notes '{0}' has found",notes));
			else
				Logger.logFailure(string.Format("Notes '{0}' has not found",notes));
			KeywordImplementation.Click(By.XPath("//UIAWindow[2]//UIAButton[contains(@name,'Done')]"));
		}

		public void ValidateDateEmpty(bool empty)
		{
			//string message=null;
			Logger.ConditionalValidation(KeywordImplementation.UIObject(By.Id("txtDOB")).GetAttribute("value").Contains("yy"),empty,"DOB details has not found",string.Format("DOB details '{0}' has found",KeywordImplementation.UIObject(By.Id("txtDOB")).Text));
		}

		public void ValidatePatientExist(string lastName, string firstName)
		{
			Logger.logSnapshot();
			if(KeywordImplementation.UIObject(By.Id("txtLastName")).Text.Contains(lastName) && KeywordImplementation.UIObject(By.Id("txtFirstName")).Text.Contains(firstName))
				Logger.logSuccess(string.Format("Patient details '{0}, {1}' has found",lastName,firstName));
			else
				Logger.logFailure(string.Format("Patient details '{0}, {1}' has not found",lastName,firstName));
		}

		public void EditNotes(string notes)
		{
			Logger.logInfo("Edit the notes field");
			KeywordImplementation.Click(By.Id("Notes"));
			KeywordImplementation.TypeText(By.Id("Txtnotes"),notes);
			if(TestSuite.Current.Parameters["Version"].Equals("10",StringComparison.CurrentCultureIgnoreCase))
				KeywordImplementation.Click(By.XPath("//XCUIElementTypeOther/XCUIElementTypeButton[contains(@name,'Done')]"));
			else if (TestSuite.Current.Parameters["Version"].Equals("9",StringComparison.CurrentCultureIgnoreCase))
				KeywordImplementation.Click(By.XPath("//UIAWindow[2]//UIAButton[contains(@name,'Done')]"));
			else
				KeywordImplementation.Click(By.XPath("//UIAScrollView//UIAButton[contains(@name,'Done')]"));
		}

	}
}
