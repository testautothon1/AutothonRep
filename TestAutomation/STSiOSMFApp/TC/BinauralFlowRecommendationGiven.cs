///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSiOSMFApp.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The BinauralFlowRecommendationGiven recording.
    /// </summary>
    [TestModule("ee37711d-1c18-4f51-ba5d-a95e4cf8becf", ModuleType.Recording, 1)]
    public partial class BinauralFlowRecommendationGiven : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSiOSMFApp.STSiOSMFAppRepository repository.
        /// </summary>
        public static STSiOSMFApp.STSiOSMFAppRepository repo = STSiOSMFApp.STSiOSMFAppRepository.Instance;

        static BinauralFlowRecommendationGiven instance = new BinauralFlowRecommendationGiven();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public BinauralFlowRecommendationGiven()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static BinauralFlowRecommendationGiven Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram configured
            Report.Log(ReportLevel.Info, "Section", "Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram configured", new RecordItemIndex(0));
            
            CreatePatient("Flow", "Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open the app, select List and select the existing customer
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app, select List and select the existing customer", new RecordItemIndex(4));
            
            StartApp();
            Delay.Milliseconds(0);
            
            SearchCustomer("Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomer("Flow", "Binaural");
            Delay.Milliseconds(0);
            
            // Step## Enter Audiogram for both.Right - 50, 50, 60, 65 dB. Left - 80, 70, 70, 75 dB for frequencies 500Hz, 1kHz, 2kHz, 4kHz and Press Done
            Report.Log(ReportLevel.Info, "Section", "Step## Enter Audiogram for both.Right - 50, 50, 60, 65 dB. Left - 80, 70, 70, 75 dB for frequencies 500Hz, 1kHz, 2kHz, 4kHz and Press Done", new RecordItemIndex(8));
            
            TapOn("Enter Audiogram");
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", "500,60;1000,65;2000,85;4000,90");
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Left", "500,85;1000,90;2000,100;4000,105");
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Audiogram is saved and Recommendation is given first for the better ear (in this case - Right), HI, Coupling and cluster
            Report.Log(ReportLevel.Info, "Section", "Validation## Audiogram is saved and Recommendation is given first for the better ear (in this case - Right), HI, Coupling and cluster", new RecordItemIndex(13));
            
            ValidateMonauralHISelected("Run P", "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected("Tip", "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected("P3", "Right");
            Delay.Milliseconds(0);
            
            // Step## Select Send Data to HI-->Connect Hearing Aid
            Report.Log(ReportLevel.Info, "Section", "Step## Select Send Data to HI-->Connect Hearing Aid", new RecordItemIndex(17));
            
            SelectPage("Send Data to Hearing Aid");
            Delay.Milliseconds(0);
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.HI is successfully paired.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.HI is successfully paired.", new RecordItemIndex(19));
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            // Step## Select Sound Comfort --> Test OK
            Report.Log(ReportLevel.Info, "Section", "Step## Select Sound Comfort --> Test OK", new RecordItemIndex(23));
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Validation## Session completed screen is opened with two options : Start Left ear Fitting and Close session
            Report.Log(ReportLevel.Info, "Section", "Validation## Session completed screen is opened with two options : Start Left ear Fitting and Close session", new RecordItemIndex(26));
            
            VerifyActionBarTitle("Session Completed");
            Delay.Milliseconds(0);
            
            ValidateButtonExist("Continue With Left Ear");
            Delay.Milliseconds(0);
            
            ValidateButtonExist("Close Session");
            Delay.Milliseconds(0);
            
            ValidateButtonEnabled("Continue With Left Ear", ValueConverter.ArgumentFromString<bool>("isEnabled", "True"));
            Delay.Milliseconds(0);
            
            // Step## Press Start Left ear Fitting
            Report.Log(ReportLevel.Info, "Section", "Step## Press Start Left ear Fitting", new RecordItemIndex(31));
            
            ContinueWithLeftEar();
            Delay.Milliseconds(0);
            
            // Validation## Split-view screen is opened with binaural flow. Right side Completed and Left side recommendation pre-filled.
            Report.Log(ReportLevel.Info, "Section", "Validation## Split-view screen is opened with binaural flow. Right side Completed and Left side recommendation pre-filled.", new RecordItemIndex(33));
            
            ValidateBinauralHISelected("Run P", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P3", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralHISelected("Run SP", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P1", "Left");
            Delay.Milliseconds(0);
            
            SendDataToHearingAid("Left");
            Delay.Milliseconds(0);
            
            // Step## Press Send data to HI (Left ear ) and Connect HI
            Report.Log(ReportLevel.Info, "Section", "Step## Press Send data to HI (Left ear ) and Connect HI", new RecordItemIndex(41));
            
            // Validation## Popup message is displayed for the profile selected. HI is successfully paired
            Report.Log(ReportLevel.Info, "Section", "Validation## Popup message is displayed for the profile selected. HI is successfully paired", new RecordItemIndex(42));
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            // Step## Press Check Sound Comfort - Select Left
            Report.Log(ReportLevel.Info, "Section", "Step## Press Check Sound Comfort - Select Left", new RecordItemIndex(46));
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            //ValidateALertMessage("Please switch ON hearing aid for right ear side.");
            //Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            SelectSide("Left");
            Delay.Milliseconds(0);
            
            // Step## Adjust sound and volume sliders - Press test OK
            Report.Log(ReportLevel.Info, "Section", "Step## Adjust sound and volume sliders - Press test OK", new RecordItemIndex(51));
            
            VolumeIncrease();
            Delay.Milliseconds(0);
            
            SoundSharper();
            Delay.Milliseconds(0);
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Step## Select Close session
            Report.Log(ReportLevel.Info, "Section", "Step## Select Close session", new RecordItemIndex(55));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Validation## Returns to Customer List
            Report.Log(ReportLevel.Info, "Section", "Validation## Returns to Customer List", new RecordItemIndex(57));
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
