///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSiOSTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MFFlowSettings recording.
    /// </summary>
    [TestModule("b6b6a72f-697d-4e89-9f0a-020c5fbd32f3", ModuleType.Recording, 1)]
    public partial class MFFlowSettings : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSiOSTouchControl.STSiOSTouchControlRepository repository.
        /// </summary>
        public static STSiOSTouchControl.STSiOSTouchControlRepository repo = STSiOSTouchControl.STSiOSTouchControlRepository.Instance;

        static MFFlowSettings instance = new MFFlowSettings();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MFFlowSettings()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MFFlowSettings Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Pre-Condition - MF flow set up done
            Report.Log(ReportLevel.Info, "Section", "Pre-Condition - MF flow set up done", new RecordItemIndex(0));
            
            StartApp();
            Delay.Milliseconds(0);
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Setup");
            Delay.Milliseconds(0);
            
            TapOn("Manual Setup");
            Delay.Milliseconds(0);
            
            TapOn("Signia Run products");
            Delay.Milliseconds(0);
            
            TapOn("Yes");
            Delay.Milliseconds(0);
            
            TapOn("Continue");
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Launch the app and navigate to settings screen
            Report.Log(ReportLevel.Info, "Section", "Step## Launch the app and navigate to settings screen", new RecordItemIndex(9));
            
            StartApp();
            Delay.Milliseconds(0);
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            // Validation## Settings screen is opened and following controls are displayed. Back button Broadcast Level Setup Language Rate our App Usage statistics Help Imprint App Version
            Report.Log(ReportLevel.Info, "Section", "Validation## Settings screen is opened and following controls are displayed. Back button Broadcast Level Setup Language Rate our App Usage statistics Help Imprint App Version", new RecordItemIndex(12));
            
            ValidateContents("Broadcast level;Setup;Language;Rate our app;Usage Statistics;Help;Imprint;App Version");
            Delay.Milliseconds(0);
            
            // Validation## Validate Sound balance slider is not displayed in MF flow
            Report.Log(ReportLevel.Info, "Section", "Validation## Validate Sound balance slider is not displayed in MF flow", new RecordItemIndex(14));
            
            ValidateContentsContains("Sound Balance", ValueConverter.ArgumentFromString<bool>("isFound", "False"));
            Delay.Milliseconds(0);
            
            // Validation## Validate Battery status on Demand and Advance setup options are hidden
            Report.Log(ReportLevel.Info, "Section", "Validation## Validate Battery status on Demand and Advance setup options are hidden", new RecordItemIndex(16));
            
            ValidateContentsContains("Battery Status;Advance Setup", ValueConverter.ArgumentFromString<bool>("isFound", "False"));
            Delay.Milliseconds(0);
            
            // Step## Validate App Version
            Report.Log(ReportLevel.Info, "Section", "Step## Validate App Version", new RecordItemIndex(18));
            
            // Validation## Application version information displayed is same as installed version and is in the format x.x.x.x
            Report.Log(ReportLevel.Info, "Section", "Validation## Application version information displayed is same as installed version and is in the format x.x.x.x", new RecordItemIndex(19));
            
            //ValidateAppVersion();
            //Delay.Milliseconds(0);
            
            // Step## Validate Usage Statistics toggle
            Report.Log(ReportLevel.Info, "Section", "Step## Validate Usage Statistics toggle", new RecordItemIndex(21));
            
            // Validation## The toggle will be set to default -ON (if not changed previously)
            Report.Log(ReportLevel.Info, "Section", "Validation## The toggle will be set to default -ON (if not changed previously)", new RecordItemIndex(22));
            
            ValidateUsageStatistics(ValueConverter.ArgumentFromString<bool>("isON", "True"));
            Delay.Milliseconds(0);
            
            // Step## Switch Usage Statistics toggle to OFF
            Report.Log(ReportLevel.Info, "Section", "Step## Switch Usage Statistics toggle to OFF", new RecordItemIndex(24));
            
            // Validation## Usage statistics feature is deactivated. Application activities are not logged until it is switched to ON.
            Report.Log(ReportLevel.Info, "Section", "Validation## Usage statistics feature is deactivated. Application activities are not logged until it is switched to ON.", new RecordItemIndex(25));
            
            SwitchUsageStatistics(ValueConverter.ArgumentFromString<bool>("on", "False"));
            Delay.Milliseconds(0);
            
            // Step## Select Imprint
            Report.Log(ReportLevel.Info, "Section", "Step## Select Imprint", new RecordItemIndex(27));
            
            TapOn("Imprint");
            Delay.Milliseconds(0);
            
            // Validation## Imprint menu is displayed with the following options Legal Notice Privacy Policy Terms & Conditions
            Report.Log(ReportLevel.Info, "Section", "Validation## Imprint menu is displayed with the following options Legal Notice Privacy Policy Terms & Conditions", new RecordItemIndex(29));
            
            ValidateContents("Legal Notice;Privacy Policy;Terms & Conditions");
            Delay.Milliseconds(0);
            
            // Step## Select Legal Notice
            Report.Log(ReportLevel.Info, "Section", "Step## Select Legal Notice", new RecordItemIndex(31));
            
            TapOn("Legal Notice");
            Delay.Milliseconds(0);
            
            // Validation## Legal Notice screen is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Legal Notice screen is displayed", new RecordItemIndex(33));
            
            ValidateContents("Copyright;Corporate Information;Legal Manufacturer");
            Delay.Milliseconds(0);
            
            // Step## select Privacy Policy
            Report.Log(ReportLevel.Info, "Section", "Step## select Privacy Policy", new RecordItemIndex(35));
            
            BackAction();
            Delay.Milliseconds(0);
            
            TapOn("Privacy Policy");
            Delay.Milliseconds(0);
            
            // Validation## Privacy policy screen is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Privacy policy screen is displayed", new RecordItemIndex(38));
            
            ValidateContents("Sivantos Commitment to Data Privacy Protection;Personal Data;Purpose of Use");
            Delay.Milliseconds(0);
            
            // Step## Select Terms & Conditions
            Report.Log(ReportLevel.Info, "Section", "Step## Select Terms & Conditions", new RecordItemIndex(40));
            
            BackAction();
            Delay.Milliseconds(0);
            
            TapOn("Terms & Conditions");
            Delay.Milliseconds(0);
            
            // Validation## Terms and Conditions screen is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Terms and Conditions screen is displayed", new RecordItemIndex(43));
            
            ValidateContents("1. Scope;2. Services;3. Registration, Password");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
