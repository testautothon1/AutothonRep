///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SpatialConfiguratorIntellizoom recording.
    /// </summary>
    [TestModule("cdedadc9-e844-4e2c-864c-07dfa590a4e3", ModuleType.Recording, 1)]
    public partial class SpatialConfiguratorIntellizoom : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndTouchControl.STSAndTouchControlRepository repository.
        /// </summary>
        public static STSAndTouchControl.STSAndTouchControlRepository repo = STSAndTouchControl.STSAndTouchControlRepository.Instance;

        static SpatialConfiguratorIntellizoom instance = new SpatialConfiguratorIntellizoom();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SpatialConfiguratorIntellizoom()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SpatialConfiguratorIntellizoom Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Start the App
            Report.Log(ReportLevel.Info, "Section", "Step## Start the App", new RecordItemIndex(0));
            
            // Step## Select a performance level and Have a look at the home screen
            Report.Log(ReportLevel.Info, "Section", "Step## Select a performance level and Have a look at the home screen", new RecordItemIndex(1));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            TapOn("Performance Level 7");
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            // Validation## Spatial configurator is available for the first program.
            Report.Log(ReportLevel.Info, "Section", "Validation## Spatial configurator is available for the first program.", new RecordItemIndex(6));
            
            ValidateContentsContains("Spatial Configurator", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Click on spatial configurator
            Report.Log(ReportLevel.Info, "Section", "Step## Click on spatial configurator", new RecordItemIndex(8));
            
            TapOn("Spatial Configurator");
            Delay.Milliseconds(0);
            
            // Validation## Spatial configurator page opens and no area/step is highlighted.
            Report.Log(ReportLevel.Info, "Section", "Validation## Spatial configurator page opens and no area/step is highlighted.", new RecordItemIndex(10));
            
            ValidateContentsWithContentDesc("Off", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Validation## There are areas/buttons for Left, right, front, back and automatic.
            Report.Log(ReportLevel.Info, "Section", "Validation## There are areas/buttons for Left, right, front, back and automatic.", new RecordItemIndex(12));
            
            ValidateContentsWithContentDesc("RightButton;LeftButton;FrontButton;BottomButton;AutoButton", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Validation## In the bottom of the screen, 5 IntelliZoom steps from wide to narrow are available.
            Report.Log(ReportLevel.Info, "Section", "Validation## In the bottom of the screen, 5 IntelliZoom steps from wide to narrow are available.", new RecordItemIndex(14));
            
            ValidateContentsWithContentDesc("step_Omni;step_Cardioid;step_100°;step_Front;step_NarrowDirectional", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Click on every area (Left, right, front, back, auto)
            Report.Log(ReportLevel.Info, "Section", "Step## Click on every area (Left, right, front, back, auto)", new RecordItemIndex(16));
            
            // Validation## The area gets highlighted
            Report.Log(ReportLevel.Info, "Section", "Validation## The area gets highlighted", new RecordItemIndex(17));
            
            TapOnwithContentDisc("LeftButton", "Tap on 'Left Button'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Left", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("RightButton", "Tap on 'Right Button'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Right", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("FrontButton", "Tap on 'Front Button'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Front", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("BottomButton", "Tap on 'Bottom Button'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Back", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("AutoButton", "Tap on 'Auto Button'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Auto", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Click on every IntelliZoom step
            Report.Log(ReportLevel.Info, "Section", "Step## Click on every IntelliZoom step", new RecordItemIndex(28));
            
            // Validate## The button and the corresponding area get highlighted
            Report.Log(ReportLevel.Info, "Section", "Validate## The button and the corresponding area get highlighted", new RecordItemIndex(29));
            
            TapOnwithContentDisc("step_Omni", "Tap on ' Step Omni '");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Omni", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("step_Cardioid", "Tap on 'Step Cardiod'");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Cardioid", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("step_100°", "Tap on ' Step100° '");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("100°", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("step_Front", "Tap on ' Step Front '");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("Front", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("step_NarrowDirectional", "Tap on ' Step NarrowDirectional '");
            Delay.Milliseconds(0);
            
            ValidateContentsWithContentDesc("NarrowDirection", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
