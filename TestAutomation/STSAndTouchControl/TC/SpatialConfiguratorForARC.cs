///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SpatialConfiguratorForARC recording.
    /// </summary>
    [TestModule("e8c18e4a-a2d2-4991-b8a6-e6ba26598256", ModuleType.Recording, 1)]
    public partial class SpatialConfiguratorForARC : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndTouchControl.STSAndTouchControlRepository repository.
        /// </summary>
        public static STSAndTouchControl.STSAndTouchControlRepository repo = STSAndTouchControl.STSAndTouchControlRepository.Instance;

        static SpatialConfiguratorForARC instance = new SpatialConfiguratorForARC();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SpatialConfiguratorForARC()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SpatialConfiguratorForARC Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Open Touch Control app
            Report.Log(ReportLevel.Info, "Section", "Step## Open Touch Control app", new RecordItemIndex(0));
            
            // Step## Perform a manual setup of a standard HI. Click on Advanced settings and select a performance level
            Report.Log(ReportLevel.Info, "Section", "Step## Perform a manual setup of a standard HI. Click on Advanced settings and select a performance level", new RecordItemIndex(1));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            ValidateContents("Performance Level 5;Performance Level 7;Other");
            Delay.Milliseconds(0);
            
            TapOn("Performance Level 7");
            Delay.Milliseconds(0);
            
            // Validation## Performance level selected
            Report.Log(ReportLevel.Info, "Section", "Validation## Performance level selected", new RecordItemIndex(6));
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            ValidateTextSelected("Performance Level 7");
            Delay.Milliseconds(0);
            
            // Step## Have a look at the home screen
            Report.Log(ReportLevel.Info, "Section", "Step## Have a look at the home screen", new RecordItemIndex(9));
            
            BackAction();
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            // Validation## Spatial configurator for the app should be implemented and should be available for the first program
            Report.Log(ReportLevel.Info, "Section", "Validation## Spatial configurator for the app should be implemented and should be available for the first program", new RecordItemIndex(12));
            
            ValidateContentsContains("Spatial Configurator;Program 1", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Go to the advanced settings in the settings screen and choose "Others"
            Report.Log(ReportLevel.Info, "Section", "Step## Go to the advanced settings in the settings screen and choose \"Others\"", new RecordItemIndex(14));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            TapOn("Other");
            Delay.Milliseconds(0);
            
            // Validation## Have a look at the home screen
            Report.Log(ReportLevel.Info, "Section", "Validation## Have a look at the home screen", new RecordItemIndex(18));
            
            BackAction();
            Delay.Milliseconds(0);
            
            // Validation## No spatial configurator is available.
            Report.Log(ReportLevel.Info, "Section", "Validation## No spatial configurator is available.", new RecordItemIndex(20));
            
            ValidateContentsContains("Spatial Configurator", ValueConverter.ArgumentFromString<bool>("isFound", "False"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
