///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MFFlowHomeScreen recording.
    /// </summary>
    [TestModule("6fa48cdc-3e09-4b0f-81f2-e1f2099de577", ModuleType.Recording, 1)]
    public partial class MFFlowHomeScreen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndTouchControl.STSAndTouchControlRepository repository.
        /// </summary>
        public static STSAndTouchControl.STSAndTouchControlRepository repo = STSAndTouchControl.STSAndTouchControlRepository.Instance;

        static MFFlowHomeScreen instance = new MFFlowHomeScreen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MFFlowHomeScreen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MFFlowHomeScreen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Pre-Condition - MF flow set up done
            Report.Log(ReportLevel.Info, "Section", "Pre-Condition - MF flow set up done", new RecordItemIndex(0));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Setup");
            Delay.Milliseconds(0);
            
            TapOn("Manual Setup");
            Delay.Milliseconds(0);
            
            TapOn("Signia Run Products");
            Delay.Milliseconds(0);
            
            TapOn("Yes");
            Delay.Milliseconds(0);
            
            TapOn("Continue");
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Launch the app and Check the available controls on the home screen.
            Report.Log(ReportLevel.Info, "Section", "Step## Launch the app and Check the available controls on the home screen.", new RecordItemIndex(8));
            
            StartApp();
            Delay.Milliseconds(0);
            
            // Validation## Volume Up/Down Slider Program area Settings button are available
            Report.Log(ReportLevel.Info, "Section", "Validation## Volume Up/Down Slider Program area Settings button are available", new RecordItemIndex(10));
            
            ValidateControlsOnHomescreen();
            Delay.Milliseconds(0);
            
            // Validation## Validate the Program access area is disabled and the program icon and program name is replaced by a brand dependent image.
            Report.Log(ReportLevel.Info, "Section", "Validation## Validate the Program access area is disabled and the program icon and program name is replaced by a brand dependent image.", new RecordItemIndex(12));
            
            ValidateContentsContains("Program;Tinnitus", ValueConverter.ArgumentFromString<bool>("isFound", "False"));
            Delay.Milliseconds(0);
            
            // Validation## Validate whether the volume slider has 16 steps and commands are heard in the HIs on turning the Volume up/ down using slider
            Report.Log(ReportLevel.Info, "Section", "Validation## Validate whether the volume slider has 16 steps and commands are heard in the HIs on turning the Volume up/ down using slider", new RecordItemIndex(14));
            
            ValidateSliderSteps();
            Delay.Milliseconds(0);
            
            // Step## Click on the Mic mute button
            Report.Log(ReportLevel.Info, "Section", "Step## Click on the Mic mute button", new RecordItemIndex(16));
            
            TapOnwithContentDisc("Mute_Button", "");
            Delay.Milliseconds(0);
            
            // Validation## The HI s enter stand-by mode The icon will be highlighted
            Report.Log(ReportLevel.Info, "Section", "Validation## The HI s enter stand-by mode The icon will be highlighted", new RecordItemIndex(18));
            
            ValidateMuteUnmute(ValueConverter.ArgumentFromString<bool>("on", "True"));
            Delay.Milliseconds(0);
            
            // Step## Click on the Mic mute button again
            Report.Log(ReportLevel.Info, "Section", "Step## Click on the Mic mute button again", new RecordItemIndex(20));
            
            TapOnwithContentDisc("Mute_Button", "");
            Delay.Milliseconds(0);
            
            // Validation## The HI s should wake up on clicking the Mic mute button again
            Report.Log(ReportLevel.Info, "Section", "Validation## The HI s should wake up on clicking the Mic mute button again", new RecordItemIndex(22));
            
            ValidateMuteUnmute(ValueConverter.ArgumentFromString<bool>("on", "False"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
