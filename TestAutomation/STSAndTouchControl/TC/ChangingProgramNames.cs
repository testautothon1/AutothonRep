///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ChangingProgramNames recording.
    /// </summary>
    [TestModule("5a079097-fbd9-462a-8497-b8410a22c096", ModuleType.Recording, 1)]
    public partial class ChangingProgramNames : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndTouchControl.STSAndTouchControlRepository repository.
        /// </summary>
        public static STSAndTouchControl.STSAndTouchControlRepository repo = STSAndTouchControl.STSAndTouchControlRepository.Instance;

        static ChangingProgramNames instance = new ChangingProgramNames();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ChangingProgramNames()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ChangingProgramNames Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Precondition- Disable Omniture Settings
            Report.Log(ReportLevel.Info, "Section", "Step## Precondition- Disable Omniture Settings", new RecordItemIndex(0));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            SwitchUsageStatistics(ValueConverter.ArgumentFromString<bool>("on", "False"));
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open program selection list.
            Report.Log(ReportLevel.Info, "Section", "Step## Open program selection list.", new RecordItemIndex(4));
            
            StartApp(ValueConverter.ArgumentFromString<bool>("isRateTheApp", "False"));
            Delay.Milliseconds(0);
            
            TapOnProgram();
            Delay.Milliseconds(0);
            
            // Validation## In program selection list, program names are set “Program 1”, “Program 2”, etc. by default.
            Report.Log(ReportLevel.Info, "Section", "Validation## In program selection list, program names are set “Program 1”, “Program 2”, etc. by default.", new RecordItemIndex(7));
            
            ValidateContents("Program 1;Program 2;Program 3");
            Delay.Milliseconds(0);
            
            // Step## Press Edit.
            Report.Log(ReportLevel.Info, "Section", "Step## Press Edit.", new RecordItemIndex(9));
            
            // Step## Select a program from the list and change the program’s name
            Report.Log(ReportLevel.Info, "Section", "Step## Select a program from the list and change the program’s name", new RecordItemIndex(10));
            
            TapOnwithContentDisc("Edit");
            Delay.Milliseconds(0);
            
            TapOn("Program 1");
            Delay.Milliseconds(0);
            
            // Validation## Program name areas turn to editable area. Program name is editable
            Report.Log(ReportLevel.Info, "Section", "Validation## Program name areas turn to editable area. Program name is editable", new RecordItemIndex(13));
            
            EditProgram("Program 1", "EditProgram 1");
            Delay.Milliseconds(0);
            
            // Step## Press Cancel
            Report.Log(ReportLevel.Info, "Section", "Step## Press Cancel", new RecordItemIndex(15));
            
            TapOnwithContentDisc("Cancel");
            Delay.Milliseconds(0);
            
            // Validation## Program name is NOT changed.
            Report.Log(ReportLevel.Info, "Section", "Validation## Program name is NOT changed.", new RecordItemIndex(17));
            
            ValidateContentsContains("Program 1", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Select a program from the list and change the program’s name. Press Done.
            Report.Log(ReportLevel.Info, "Section", "Step## Select a program from the list and change the program’s name. Press Done.", new RecordItemIndex(19));
            
            TapOnwithContentDisc("Edit");
            Delay.Milliseconds(0);
            
            EditProgram("Program 1", "EditProgram 1");
            Delay.Milliseconds(0);
            
            TapOnwithContentDisc("Accept");
            Delay.Milliseconds(0);
            
            // Validation## Selected program’s name is changed.
            Report.Log(ReportLevel.Info, "Section", "Validation## Selected program’s name is changed.", new RecordItemIndex(23));
            
            ValidateContentsContains("Program 1", ValueConverter.ArgumentFromString<bool>("isFound", "False"));
            Delay.Milliseconds(0);
            
            ValidateContentsContains("EditProgram 1", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
            // Step## Select the changed program.
            Report.Log(ReportLevel.Info, "Section", "Step## Select the changed program.", new RecordItemIndex(26));
            
            TapOn("EditProgram 1");
            Delay.Milliseconds(0);
            
            // Validation## Program is selected and home page is displayed automatically. Updated program name is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Program is selected and home page is displayed automatically. Updated program name is displayed", new RecordItemIndex(28));
            
            ValidateContents("EditProgram 1");
            Delay.Milliseconds(0);
            
            // Step## Close and reopen the touchControl application.
            Report.Log(ReportLevel.Info, "Section", "Step## Close and reopen the touchControl application.", new RecordItemIndex(30));
            
            CloseApp();
            Delay.Milliseconds(0);
            
            StartApp();
            Delay.Milliseconds(0);
            
            // Validation## Application is reopened and updated program name is displayed.
            Report.Log(ReportLevel.Info, "Section", "Validation## Application is reopened and updated program name is displayed.", new RecordItemIndex(33));
            
            ValidateContents("EditProgram 1");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
