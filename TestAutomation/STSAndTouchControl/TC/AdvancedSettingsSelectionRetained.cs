///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndTouchControl.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AdvancedSettingsSelectionRetained recording.
    /// </summary>
    [TestModule("5a566629-5789-4612-90c9-d25f90739118", ModuleType.Recording, 1)]
    public partial class AdvancedSettingsSelectionRetained : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndTouchControl.STSAndTouchControlRepository repository.
        /// </summary>
        public static STSAndTouchControl.STSAndTouchControlRepository repo = STSAndTouchControl.STSAndTouchControlRepository.Instance;

        static AdvancedSettingsSelectionRetained instance = new AdvancedSettingsSelectionRetained();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AdvancedSettingsSelectionRetained()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AdvancedSettingsSelectionRetained Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Open Touch Control app
            Report.Log(ReportLevel.Info, "Section", "Step## Open Touch Control app", new RecordItemIndex(0));
            
            StartApp();
            Delay.Milliseconds(0);
            
            // Step## Perform a manual setup.Click on Advanced settings
            Report.Log(ReportLevel.Info, "Section", "Step## Perform a manual setup.Click on Advanced settings", new RecordItemIndex(2));
            
            TapOnSettings();
            Delay.Milliseconds(0);
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            // Validation##  3 Options should be displayed 7 Performance Level 5 Performance Level Others (default)
            Report.Log(ReportLevel.Info, "Section", "Validation##  3 Options should be displayed 7 Performance Level 5 Performance Level Others (default)", new RecordItemIndex(5));
            
            ValidateContents("Performance Level 5;Performance Level 7;Other");
            Delay.Milliseconds(0);
            
            ValidateTextSelected("Other");
            Delay.Milliseconds(0);
            
            // Step## Change the selection to 7 performance level and go back
            Report.Log(ReportLevel.Info, "Section", "Step## Change the selection to 7 performance level and go back", new RecordItemIndex(8));
            
            TapOn("Performance Level 7");
            Delay.Milliseconds(0);
            
            // Validation## The newly selected level should be retained when the user comes back to the screen
            Report.Log(ReportLevel.Info, "Section", "Validation## The newly selected level should be retained when the user comes back to the screen", new RecordItemIndex(10));
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            ValidateTextSelected("Performance Level 7");
            Delay.Milliseconds(0);
            
            // Step## Change the selection to 5 performance level and go back
            Report.Log(ReportLevel.Info, "Section", "Step## Change the selection to 5 performance level and go back", new RecordItemIndex(13));
            
            TapOn("Performance Level 5");
            Delay.Milliseconds(0);
            
            // Validation## The newly selected level should be retained when the user comes back to the screen
            Report.Log(ReportLevel.Info, "Section", "Validation## The newly selected level should be retained when the user comes back to the screen", new RecordItemIndex(15));
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            ValidateTextSelected("Performance Level 5");
            Delay.Milliseconds(0);
            
            // Step## Change the selection to Others and go back
            Report.Log(ReportLevel.Info, "Section", "Step## Change the selection to Others and go back", new RecordItemIndex(18));
            
            TapOn("Other");
            Delay.Milliseconds(0);
            
            // Validation## The newly selected level should be retained when the user comes back to the screen
            Report.Log(ReportLevel.Info, "Section", "Validation## The newly selected level should be retained when the user comes back to the screen", new RecordItemIndex(20));
            
            TapOn("Advanced Setup");
            Delay.Milliseconds(0);
            
            ValidateTextSelected("Other");
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            // Step## Have a look at the Settings menu
            Report.Log(ReportLevel.Info, "Section", "Step## Have a look at the Settings menu", new RecordItemIndex(24));
            
            // Validation## Advanced Setup button should be present in the settings screen
            Report.Log(ReportLevel.Info, "Section", "Validation## Advanced Setup button should be present in the settings screen", new RecordItemIndex(25));
            
            ValidateContentsContains("Advanced Setup", ValueConverter.ArgumentFromString<bool>("isFound", "True"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
