///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSmyHearing.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LegalTexts recording.
    /// </summary>
    [TestModule("37290307-843d-4f9b-8cb9-9e0925d85127", ModuleType.Recording, 1)]
    public partial class LegalTexts : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSmyHearing.STSmyHearingRepository repository.
        /// </summary>
        public static STSmyHearing.STSmyHearingRepository repo = STSmyHearing.STSmyHearingRepository.Instance;

        static LegalTexts instance = new LegalTexts();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LegalTexts()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LegalTexts Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Open the app, click on "Hearing Aid"
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app, click on \"Hearing Aid\"", new RecordItemIndex(0));
            
            TapOnHome();
            Delay.Milliseconds(0);
            
            TapOn("My Hearing Aid");
            Delay.Milliseconds(0);
            
            // Step## Click on "User Guide"
            Report.Log(ReportLevel.Info, "Section", "Step## Click on \"User Guide\"", new RecordItemIndex(3));
            
            TapOn("User Guide");
            Delay.Milliseconds(0);
            
            // Validation## User should be able to see "App info" and App Version.
            Report.Log(ReportLevel.Info, "Section", "Validation## User should be able to see \"App info\" and App Version.", new RecordItemIndex(5));
            
            ValidateActionBarTitle("User Guide");
            Delay.Milliseconds(0);
            
            ValidateContents("App Info;App Version");
            Delay.Milliseconds(0);
            
            // Step## Click on "App info"
            Report.Log(ReportLevel.Info, "Section", "Step## Click on \"App info\"", new RecordItemIndex(8));
            
            TapOn("App Info");
            Delay.Milliseconds(0);
            
            // Validation## The intended use should be displayed.
            Report.Log(ReportLevel.Info, "Section", "Validation## The intended use should be displayed.", new RecordItemIndex(10));
            
            ValidateActionBarTitle("App Info");
            Delay.Milliseconds(0);
            
            ValidateContents("Intended Use;The myHearing app is a tool whereby the patient can adjust comfort functions of a hearing aid, within a framework given by a hearing health professional, including Audiologist, ENT or acoustician. It also enables the hearing care professional to remotely personalize the hearing instrument parameters within a given framework.");
            Delay.Milliseconds(0);
            
            // Step## Click on back" , click on "Imprint"
            Report.Log(ReportLevel.Info, "Section", "Step## Click on back\" , click on \"Imprint\"", new RecordItemIndex(13));
            
            BackAction();
            Delay.Milliseconds(0);
            
            TapOn("Imprint");
            Delay.Milliseconds(0);
            
            // Validation## The user should be able to see the App's legal texts: Imprint, Privacy Policy,Terms & Conditions.
            Report.Log(ReportLevel.Info, "Section", "Validation## The user should be able to see the App's legal texts: Imprint, Privacy Policy,Terms & Conditions.", new RecordItemIndex(16));
            
            ValidateContents("Imprint;Privacy policy;Terms and conditions");
            Delay.Milliseconds(0);
            
            // Step## Click on privacy policy.
            Report.Log(ReportLevel.Info, "Section", "Step## Click on privacy policy.", new RecordItemIndex(18));
            
            TapOn("Privacy policy");
            Delay.Milliseconds(0);
            
            // Validation## The user should be able to see all the text for privacy policy.
            Report.Log(ReportLevel.Info, "Section", "Validation## The user should be able to see all the text for privacy policy.", new RecordItemIndex(20));
            
            ValidateContentsWithDesc("Datenschutzrichtlinien;Unsere Verpflichtung zum Datenschutz;Personenbezogene Daten;Zweckbestimmung;Zweckgebundene Verwendung;Kommunikations- oder nutzungsbezogene Angaben;Automatisch erfasste nicht-personenbezogene Daten;Kinder;Datenspeicherung;Sicherheit;Links zu anderen Webseiten;Fragen und Anmerkungen", ValueConverter.ArgumentFromString<bool>("takeScreenshot", "False"));
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            // Step## Click on Terms & conditions
            Report.Log(ReportLevel.Info, "Section", "Step## Click on Terms & conditions", new RecordItemIndex(23));
            
            TapOn("Terms and conditions");
            Delay.Milliseconds(0);
            
            // Validation## The user should be able to see all the text for Terms &conditions.
            Report.Log(ReportLevel.Info, "Section", "Validation## The user should be able to see all the text for Terms &conditions.", new RecordItemIndex(25));
            
            ValidateContentsWithDesc("Anwendungsbereich;Services;Registrierung;Nutzungsrechte an Informationen, Software und Dokumentation;Geistiges Eigentum;Pflichten des Nutzers;Hyperlinks;Haftung;Sonstige Haftung, Viren;Einhaltung von Exportkontrollbestimmungen;Datenschutz;Nebenabreden, Gerichtsstand, Anwendbares Recht", ValueConverter.ArgumentFromString<bool>("takeScreenshot", "False"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
