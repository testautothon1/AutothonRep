///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The HighCluster recording.
    /// </summary>
    [TestModule("6ac1e53f-cc5b-4841-bc0b-64291ea7e9e0", ModuleType.Recording, 1)]
    public partial class HighCluster : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static HighCluster instance = new HighCluster();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public HighCluster()
        {
            H2 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static HighCluster Instance
        {
            get { return instance; }
        }

#region Variables

        string _H2;

        /// <summary>
        /// Gets or sets the value of variable H2.
        /// </summary>
        [TestVariable("8de2aa02-b79b-4a04-b8f3-f50866cc983d")]
        public string H2
        {
            get { return _H2; }
            set { _H2 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Pre-condition: Initial setup is done.
            Report.Log(ReportLevel.Info, "Section", "Pre-condition: Initial setup is done.", new RecordItemIndex(0));
            
            // Step## Customer configured with audiogram exists. Enabled Custom molds
            Report.Log(ReportLevel.Info, "Section", "Step## Customer configured with audiogram exists. Enabled Custom molds", new RecordItemIndex(1));
            
            TapOnRightButton("Tap on 'Settings'");
            Delay.Milliseconds(0);
            
            SwitchSettingUseMold(ValueConverter.ArgumentFromString<bool>("YesNo", "True"));
            Delay.Milliseconds(0);
            
            TapOnLeftButton("Press Back key");
            Delay.Milliseconds(0);
            
            CreatePatient("Higher", "Cluster");
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open the app and select the customer from the list
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app and select the customer from the list", new RecordItemIndex(8));
            
            StartApp();
            Delay.Milliseconds(0);
            
            SearchCustomer("Cluster");
            Delay.Milliseconds(0);
            
            SelectCustomer("Higher", "Cluster");
            Delay.Milliseconds(0);
            
            // Step## Enter audiogram - Right 80 dB, 80 dB, 80 dB, 80 dB for the required frequencies
            Report.Log(ReportLevel.Info, "Section", "Step## Enter audiogram - Right 80 dB, 80 dB, 80 dB, 80 dB for the required frequencies", new RecordItemIndex(12));
            
            TapEnterAudiogram();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", "500,80;1000,80;2000,80;4000,80");
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Do you want to enter values for the \"right\" ear side too?");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("No");
            Delay.Milliseconds(0);
            
            // Validation## Overview screen is displayed with Send data to Hearing Aid step highlighted. Run SP  & Custom Mold & P3 cluster is recommended
            Report.Log(ReportLevel.Info, "Section", "Validation## Overview screen is displayed with Send data to Hearing Aid step highlighted. Run SP  & Custom Mold & P3 cluster is recommended", new RecordItemIndex(18));
            
            ValidateMonauralHISelected(H2, "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected("Custom Mold", "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected("P3", "Right");
            Delay.Milliseconds(0);
            
            // Step## Select the cluster tab and choose a Cluster higher than the recommended cluster(i.e. P4)
            Report.Log(ReportLevel.Info, "Section", "Step## Select the cluster tab and choose a Cluster higher than the recommended cluster(i.e. P4)", new RecordItemIndex(22));
            
            TapOn("P3");
            Delay.Milliseconds(0);
            
            TapOn("P4");
            Delay.Milliseconds(0);
            
            // Validation## The new cluster is selected and returns to overview screen
            Report.Log(ReportLevel.Info, "Section", "Validation## The new cluster is selected and returns to overview screen", new RecordItemIndex(25));
            
            ValidateMonauralClusterSelected("P4", "Right");
            Delay.Milliseconds(0);
            
            VerifyActionBarTitle("Higher, Cluster");
            Delay.Milliseconds(0);
            
            // Step## Press Send data to HI
            Report.Log(ReportLevel.Info, "Section", "Step## Press Send data to HI", new RecordItemIndex(28));
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.", new RecordItemIndex(29));
            
            TapOn("Send Data to Hearing Aid");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            // Step## Click on OK in the pop-up appeared and Tap on Connect HI
            Report.Log(ReportLevel.Info, "Section", "Step## Click on OK in the pop-up appeared and Tap on Connect HI", new RecordItemIndex(32));
            
            // Validation## Tapping yes in connect confirmation should show HI is connected successfully.
            Report.Log(ReportLevel.Info, "Section", "Validation## Tapping yes in connect confirmation should show HI is connected successfully.", new RecordItemIndex(33));
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            try {
                ConnectHI();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            ConfirmationToneYes();
            Delay.Milliseconds(0);
            
            // Step## Press Check Sound Comfort
            Report.Log(ReportLevel.Info, "Section", "Step## Press Check Sound Comfort", new RecordItemIndex(37));
            
            TapOn("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            // Validation## Sound coumfort page displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Sound coumfort page displayed", new RecordItemIndex(39));
            
            VerifyActionBarTitle("Sound Comfort");
            Delay.Milliseconds(0);
            
            // Step## Select the cluster tab and choose a sound profile higher than the recommended cluster.Ex : P5
            Report.Log(ReportLevel.Info, "Section", "Step## Select the cluster tab and choose a sound profile higher than the recommended cluster.Ex : P5", new RecordItemIndex(41));
            
            TapOnWithContentDesc("P4");
            Delay.Milliseconds(0);
            
            TapOn("P5");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Selected Sound Profile provides higher amplification than the recommended Profile. Are you sure of your selection?");
            Delay.Milliseconds(0);
            
            ValidateContents("OK;Reselect");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected("P5", "Right");
            Delay.Milliseconds(0);
            
            LogSnapshot();
            Delay.Milliseconds(0);
            
            // Step##Press OK and Close Session
            Report.Log(ReportLevel.Info, "Section", "Step##Press OK and Close Session", new RecordItemIndex(49));
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Validation## Back to Client page
            Report.Log(ReportLevel.Info, "Section", "Validation## Back to Client page", new RecordItemIndex(52));
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
