///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The BinauralFlowRecommendationNotGiven recording.
    /// </summary>
    [TestModule("5298e770-fed0-4104-8885-6f39fb9ba5a6", ModuleType.Recording, 1)]
    public partial class BinauralFlowRecommendationNotGiven : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static BinauralFlowRecommendationNotGiven instance = new BinauralFlowRecommendationNotGiven();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public BinauralFlowRecommendationNotGiven()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static BinauralFlowRecommendationNotGiven Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram available is "on"
            Report.Log(ReportLevel.Info, "Section", "Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram available is \"on\"", new RecordItemIndex(0));
            
            TapOnRightButton("Tap on 'Settings'");
            Delay.Milliseconds(0);
            
            SwitchSettingUseMold(ValueConverter.ArgumentFromString<bool>("YesNo", "False"));
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            CreatePatient("RecomNot", "Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open the app & go to List.
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app & go to List.", new RecordItemIndex(7));
            
            // Step## Select the customer created from the list.
            Report.Log(ReportLevel.Info, "Section", "Step## Select the customer created from the list.", new RecordItemIndex(8));
            
            StartApp();
            Delay.Milliseconds(0);
            
            SearchCustomer("Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomer("RecomNot", "Binaural");
            Delay.Milliseconds(0);
            
            // Step## Enter Audiogram for both Right - 40,40,50,50 dB.Left - 50, 55, 40,40 dB for frequencies 500Hz, 1kHz, 2kHz, 4kHz and Press Done
            Report.Log(ReportLevel.Info, "Section", "Step## Enter Audiogram for both Right - 40,40,50,50 dB.Left - 50, 55, 40,40 dB for frequencies 500Hz, 1kHz, 2kHz, 4kHz and Press Done", new RecordItemIndex(12));
            
            TapEnterAudiogram();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("right", "500,40;1000,40;2000,50;4000,50");
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("left", "500,50;1000,55;2000,40;4000,40");
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Audiogram is saved and Recommendation is given  for the better ear (in this case -Right ear), HI and cluster
            Report.Log(ReportLevel.Info, "Section", "Validation## Audiogram is saved and Recommendation is given  for the better ear (in this case -Right ear), HI and cluster", new RecordItemIndex(17));
            
            ValidateMonauralHISelected("Run P", "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected("Tip", "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected("P1", "Right");
            Delay.Milliseconds(0);
            
            // Step## Select Send data to Hearing Aid and Connect HI
            Report.Log(ReportLevel.Info, "Section", "Step## Select Send data to Hearing Aid and Connect HI", new RecordItemIndex(21));
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.", new RecordItemIndex(22));
            
            SelectPage("Send Data to Hearing Aid");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            // Step## Select Sound Comfort --> Test OK
            Report.Log(ReportLevel.Info, "Section", "Step## Select Sound Comfort --> Test OK", new RecordItemIndex(27));
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Validation## Session completed screen is opened with two options : Start left ear Fitting and Close session
            Report.Log(ReportLevel.Info, "Section", "Validation## Session completed screen is opened with two options : Start left ear Fitting and Close session", new RecordItemIndex(30));
            
            VerifyActionBarTitle("Session Completed");
            Delay.Milliseconds(0);
            
            ValidateButtonExist("Continue With Left Ear");
            Delay.Milliseconds(0);
            
            ValidateButtonExist("Close Session");
            Delay.Milliseconds(0);
            
            ValidateButtonEnabled("Continue With Left Ear", ValueConverter.ArgumentFromString<bool>("isEnabled", "True"));
            Delay.Milliseconds(0);
            
            // Step## Press Close session
            Report.Log(ReportLevel.Info, "Section", "Step## Press Close session", new RecordItemIndex(35));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Validation## Returns to Customer list screen
            Report.Log(ReportLevel.Info, "Section", "Validation## Returns to Customer list screen", new RecordItemIndex(37));
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
            // Step## Reload the same customer
            Report.Log(ReportLevel.Info, "Section", "Step## Reload the same customer", new RecordItemIndex(39));
            
            SearchCustomer("Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomer("RecomNot", "Binaural");
            Delay.Milliseconds(0);
            
            // Validation## Overview screen is opened with the option- Start left ear Fitting at the bottom
            Report.Log(ReportLevel.Info, "Section", "Validation## Overview screen is opened with the option- Start left ear Fitting at the bottom", new RecordItemIndex(42));
            
            ValidateButtonExist("Continue With Left Ear");
            Delay.Milliseconds(0);
            
            // Step## Select Start left ear Fitting
            Report.Log(ReportLevel.Info, "Section", "Step## Select Start left ear Fitting", new RecordItemIndex(44));
            
            ContinueWithLeftEar();
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            // Validation## Split-view screen is opened with binaural flow. Right side Completed and manual selection for left side as there is no recommendation possible.
            Report.Log(ReportLevel.Info, "Section", "Validation## Split-view screen is opened with binaural flow. Right side Completed and manual selection for left side as there is no recommendation possible.", new RecordItemIndex(47));
            
            ValidateBinauralHISelected("Run P", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P1", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralHINotSelected("Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterNotSelected("Left");
            Delay.Milliseconds(0);
            
            SelectPage("Select Hearing Aid");
            Delay.Milliseconds(0);
            
            // Step## Tap on Select HI  -> Ex: Run P
            Report.Log(ReportLevel.Info, "Section", "Step## Tap on Select HI  -> Ex: Run P", new RecordItemIndex(54));
            
            // Validation## Acoustician can select the HI and Coupling is based on audiogram entered.
            Report.Log(ReportLevel.Info, "Section", "Validation## Acoustician can select the HI and Coupling is based on audiogram entered.", new RecordItemIndex(55));
            
            TapOn("Run P");
            Delay.Milliseconds(0);
            
            ValidateBinauralHISelected("Run P", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P2", "Left");
            Delay.Milliseconds(0);
            
            // Step## Connect HI by clicking Send Data to Hearing Aid
            Report.Log(ReportLevel.Info, "Section", "Step## Connect HI by clicking Send Data to Hearing Aid", new RecordItemIndex(60));
            
            SendDataToHearingAid("Left");
            Delay.Milliseconds(0);
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.", new RecordItemIndex(62));
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            // Step## Select Check sound comfort (Left)-> Press Ok
            Report.Log(ReportLevel.Info, "Section", "Step## Select Check sound comfort (Left)-> Press Ok", new RecordItemIndex(66));
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            SelectSide("Left");
            Delay.Milliseconds(0);
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Step## Close the session
            Report.Log(ReportLevel.Info, "Section", "Step## Close the session", new RecordItemIndex(70));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
            // Step## Reload the customer
            Report.Log(ReportLevel.Info, "Section", "Step## Reload the customer", new RecordItemIndex(73));
            
            SearchCustomer("Binaural");
            Delay.Milliseconds(0);
            
            SelectCustomer("RecomNot", "Binaural");
            Delay.Milliseconds(0);
            
            // Validation## Ensure all the selection and recommendation are intact without any changes
            Report.Log(ReportLevel.Info, "Section", "Validation## Ensure all the selection and recommendation are intact without any changes", new RecordItemIndex(76));
            
            ValidateBinauralHISelected("Run P", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P1", "Right");
            Delay.Milliseconds(0);
            
            ValidateBinauralHISelected("Run P", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralCouplingSelected("Tip", "Left");
            Delay.Milliseconds(0);
            
            ValidateBinauralClusterSelected("P2", "Left");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
