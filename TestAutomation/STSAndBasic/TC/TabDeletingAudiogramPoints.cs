///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The TabDeletingAudiogramPoints recording.
    /// </summary>
    [TestModule("6f96a53b-f2da-4d2a-ab89-9dab4ccc5884", ModuleType.Recording, 1)]
    public partial class TabDeletingAudiogramPoints : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static TabDeletingAudiogramPoints instance = new TabDeletingAudiogramPoints();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public TabDeletingAudiogramPoints()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static TabDeletingAudiogramPoints Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Pre-condition: Initial setup and Access code setup is done.Customer with audiogram is present.
            Report.Log(ReportLevel.Info, "Section", "Step## Pre-condition: Initial setup and Access code setup is done.Customer with audiogram is present.", new RecordItemIndex(0));
            
            CreatePatient("Deleting", "AudiPoints");
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            TapEnterAudiogram();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", "250,50;500,40;1000,45;2000,50;4000,55;8000,60");
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Left", "250,50;500,40;1000,45;2000,50;4000,55;8000,60");
            Delay.Milliseconds(0);
            
            TabTapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            StartApp();
            Delay.Milliseconds(0);
            
            // Step## Select a customer with audiogram filled wilth all values from .25 kHz to 8 kHz
            Report.Log(ReportLevel.Info, "Section", "Step## Select a customer with audiogram filled wilth all values from .25 kHz to 8 kHz", new RecordItemIndex(9));
            
            SearchCustomer("AudiPoints");
            Delay.Milliseconds(0);
            
            SelectCustomer("Deleting", "AudiPoints");
            Delay.Milliseconds(0);
            
            // Validation## Overview screen is displayed with prefilled details
            Report.Log(ReportLevel.Info, "Section", "Validation## Overview screen is displayed with prefilled details", new RecordItemIndex(12));
            
            VerifyActionBarTitle("Deleting, AudiPoints");
            Delay.Milliseconds(0);
            
            ValidateAudiogramPointsOnCustomerOverviewScreen("Right", "250,50;500,40;1000,45;2000,50;4000,55;8000,60", ValueConverter.ArgumentFromString<bool>("isExist", "True"));
            Delay.Milliseconds(0);
            
            // Step## Click on right audiogram present in Overview screen
            Report.Log(ReportLevel.Info, "Section", "Step## Click on right audiogram present in Overview screen", new RecordItemIndex(15));
            
            TapOnOverviewScreen("Right");
            Delay.Milliseconds(0);
            
            // Validation## Audiogram view screen is displayed.
            Report.Log(ReportLevel.Info, "Section", "Validation## Audiogram view screen is displayed.", new RecordItemIndex(17));
            
            ValidateContents("Audiogram;Edit");
            Delay.Milliseconds(0);
            
            // Step## Click on edit button
            Report.Log(ReportLevel.Info, "Section", "Step## Click on edit button", new RecordItemIndex(19));
            
            TabTapOnRightButton("Edit Audiogram");
            Delay.Milliseconds(0);
            
            // Validation## Edit audiogram screen is displayed.
            Report.Log(ReportLevel.Info, "Section", "Validation## Edit audiogram screen is displayed.", new RecordItemIndex(21));
            
            ValidateContents("Cancel;Audiogram;Done");
            Delay.Milliseconds(0);
            
            // Step## Right ear - Tap on any one of the plotted point
            Report.Log(ReportLevel.Info, "Section", "Step## Right ear - Tap on any one of the plotted point", new RecordItemIndex(23));
            
            DrawAudiogramPoints("Right", "250,50");
            Delay.Milliseconds(0);
            
            // Validation## The tool-tip (trash can) appears.
            Report.Log(ReportLevel.Info, "Section", "Validation## The tool-tip (trash can) appears.", new RecordItemIndex(25));
            
            ValidateTrashToolTipExist("Right", ValueConverter.ArgumentFromString<bool>("isExist", "True"));
            Delay.Milliseconds(0);
            
            // Step## Tap on the left ear side
            Report.Log(ReportLevel.Info, "Section", "Step## Tap on the left ear side", new RecordItemIndex(27));
            
            TapOn("Left");
            Delay.Milliseconds(0);
            
            // Validation## On the left ear side tool-tip should not be visible
            Report.Log(ReportLevel.Info, "Section", "Validation## On the left ear side tool-tip should not be visible", new RecordItemIndex(29));
            
            ValidateTrashToolTipExist("Left", ValueConverter.ArgumentFromString<bool>("isExist", "False"));
            Delay.Milliseconds(0);
            
            // Step## Tap on the right ear side
            Report.Log(ReportLevel.Info, "Section", "Step## Tap on the right ear side", new RecordItemIndex(31));
            
            TapOn("Right");
            Delay.Milliseconds(0);
            
            ValidateTrashToolTipExist("Right", ValueConverter.ArgumentFromString<bool>("isExist", "True"));
            Delay.Milliseconds(0);
            
            // Validation## The tool-tip is not dismissed
            Report.Log(ReportLevel.Info, "Section", "Validation## The tool-tip is not dismissed", new RecordItemIndex(34));
            
            // Step## Press the trash can points for .25 kHz and 8 kHZ
            Report.Log(ReportLevel.Info, "Section", "Step## Press the trash can points for .25 kHz and 8 kHZ", new RecordItemIndex(35));
            
            TapOnTrashToolTip();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", "8000,60");
            Delay.Milliseconds(0);
            
            TapOnTrashToolTip();
            Delay.Milliseconds(0);
            
            // Validation## Plotted point is deleted and connecting lines are deleted.
            Report.Log(ReportLevel.Info, "Section", "Validation## Plotted point is deleted and connecting lines are deleted.", new RecordItemIndex(39));
            
            ValidateAudiogramPoints("Right", "500,40;1000,45;2000,50;4000,55");
            Delay.Milliseconds(0);
            
            // Step## Press Done and verify the points plotted in the overview screen
            Report.Log(ReportLevel.Info, "Section", "Step## Press Done and verify the points plotted in the overview screen", new RecordItemIndex(41));
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Deleted points should not show up -correct set of points saved and displayed. Note: 0.5 k HZ to 4 kHz fields are mandatory.
            Report.Log(ReportLevel.Info, "Section", "Validation## Deleted points should not show up -correct set of points saved and displayed. Note: 0.5 k HZ to 4 kHz fields are mandatory.", new RecordItemIndex(43));
            
            ValidateAudiogramPointsOnCustomerOverviewScreen("Right", "500,40;1000,45;2000,50;4000,55", ValueConverter.ArgumentFromString<bool>("isExist", "True"));
            Delay.Milliseconds(0);
            
            // Step## Tap on the audiogram on the overview screen again and press edit
            Report.Log(ReportLevel.Info, "Section", "Step## Tap on the audiogram on the overview screen again and press edit", new RecordItemIndex(45));
            
            TapOnOverviewScreen("Right");
            Delay.Milliseconds(0);
            
            TabTapOnRightButton("Edit Audiogram");
            Delay.Milliseconds(0);
            
            // Step##  Delete any 2 points plotted on the right audiogram and hit Done
            Report.Log(ReportLevel.Info, "Section", "Step##  Delete any 2 points plotted on the right audiogram and hit Done", new RecordItemIndex(48));
            
            DrawAudiogramPoints("Right", "500,40");
            Delay.Milliseconds(0);
            
            TapOnTrashToolTip();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", "1000,45");
            Delay.Milliseconds(0);
            
            TapOnTrashToolTip();
            Delay.Milliseconds(0);
            
            TabTapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Popup is displayed for missing values for frequencies and cannot be saved
            Report.Log(ReportLevel.Info, "Section", "Validation## Popup is displayed for missing values for frequencies and cannot be saved", new RecordItemIndex(54));
            
            ValidateALertMessage("Please enter values at 0.5, 1, 2 and 4 kHz.");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
