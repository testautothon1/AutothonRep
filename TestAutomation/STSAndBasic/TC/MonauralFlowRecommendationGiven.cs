///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MonauralFlowRecommendationGiven recording.
    /// </summary>
    [TestModule("f6906616-05cd-40d8-9195-90ed05e457d2", ModuleType.Recording, 1)]
    public partial class MonauralFlowRecommendationGiven : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static MonauralFlowRecommendationGiven instance = new MonauralFlowRecommendationGiven();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MonauralFlowRecommendationGiven()
        {
            H4 = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MonauralFlowRecommendationGiven Instance
        {
            get { return instance; }
        }

#region Variables

        string _H4;

        /// <summary>
        /// Gets or sets the value of variable H4.
        /// </summary>
        [TestVariable("725fde62-796c-45ce-a1c1-cc32b9465dcd")]
        public string H4
        {
            get { return _H4; }
            set { _H4 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram configured
            Report.Log(ReportLevel.Info, "Section", "Step## Pre-Condition - Initial setup and Access code setup is done.Customer created with audiogram configured", new RecordItemIndex(0));
            
            CreatePatient("Flow", "Monaural");
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open the app, select List and select the existing customer
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app, select List and select the existing customer", new RecordItemIndex(4));
            
            StartApp();
            Delay.Milliseconds(0);
            
            SearchCustomer("Monaural");
            Delay.Milliseconds(0);
            
            SelectCustomer("Flow", "Monaural");
            Delay.Milliseconds(0);
            
            // Step## Enter Audiogram -Left with 40, 45 ,50 55 dB for the required frequencies 500Hz, 1kHz, 2kHz, 4kHz and press Done
            Report.Log(ReportLevel.Info, "Section", "Step## Enter Audiogram -Left with 40, 45 ,50 55 dB for the required frequencies 500Hz, 1kHz, 2kHz, 4kHz and press Done", new RecordItemIndex(8));
            
            TapEnterAudiogram();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("left", "500,40;1000,45;2000,50;4000,55");
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Pop up appears to enter values for right ear.
            Report.Log(ReportLevel.Info, "Section", "Validation## Pop up appears to enter values for right ear.", new RecordItemIndex(12));
            
            ValidateALertMessage("Do you want to enter values for the \"right\" ear side too?");
            Delay.Milliseconds(0);
            
            // Step## Press No for the popup appeared
            Report.Log(ReportLevel.Info, "Section", "Step## Press No for the popup appeared", new RecordItemIndex(14));
            
            ClickOnAlertMessage("No");
            Delay.Milliseconds(0);
            
            // Validation## Returns to the overview screen with recommendation given for HI, Coupling and Cluster
            Report.Log(ReportLevel.Info, "Section", "Validation## Returns to the overview screen with recommendation given for HI, Coupling and Cluster", new RecordItemIndex(16));
            
            ValidateMonauralHISelected(H4, "Left");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected("Click Sleeve", "Left");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected("P5", "Left");
            Delay.Milliseconds(0);
            
            // Step## Click on HI and Reselect same HI
            Report.Log(ReportLevel.Info, "Section", "Step## Click on HI and Reselect same HI", new RecordItemIndex(20));
            
            TapOn(H4);
            Delay.Milliseconds(0);
            
            ValidateRecommendationEnabled("Left", ValueConverter.ArgumentFromString<bool>("isEnabled", "True"));
            Delay.Milliseconds(0);
            
            TapOn("Fit left ear with hearing aid");
            Delay.Milliseconds(0);
            
            TapOnRecommendedHearingAid(H4);
            Delay.Milliseconds(0);
            
            // Step## Click on cluster to change from P5 to P6(higher Cluster than recommended)
            Report.Log(ReportLevel.Info, "Section", "Step## Click on cluster to change from P5 to P6(higher Cluster than recommended)", new RecordItemIndex(25));
            
            TapOn("P5");
            Delay.Milliseconds(0);
            
            TapOn("P6");
            Delay.Milliseconds(0);
            
            // Step## Press Send data to HI and Connect-Pair HI
            Report.Log(ReportLevel.Info, "Section", "Step## Press Send data to HI and Connect-Pair HI", new RecordItemIndex(28));
            
            SelectPage("Send Data to Hearing Aid");
            Delay.Milliseconds(0);
            
            // Validation## Alert message is displayed as Selected sound profile provides higher amplification than recommended profile. HI is successfully paired
            Report.Log(ReportLevel.Info, "Section", "Validation## Alert message is displayed as Selected sound profile provides higher amplification than recommended profile. HI is successfully paired", new RecordItemIndex(30));
            
            ValidateALertMessage(" Selected Sound Profile provides higher amplification than the recommended Profile. Are you sure of your selection?");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            TapOn("Yes");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            // Step## Press Sound Comfort
            Report.Log(ReportLevel.Info, "Section", "Step## Press Sound Comfort", new RecordItemIndex(36));
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            // Step## Increase/Decrease the volume and sound balancers using +/- buttons or slider
            Report.Log(ReportLevel.Info, "Section", "Step## Increase/Decrease the volume and sound balancers using +/- buttons or slider", new RecordItemIndex(38));
            
            VolumeIncrease();
            Delay.Milliseconds(0);
            
            SoundSharper();
            Delay.Milliseconds(0);
            
            // Step## Press Test OK
            Report.Log(ReportLevel.Info, "Section", "Step## Press Test OK", new RecordItemIndex(41));
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Validation## Session is completed
            Report.Log(ReportLevel.Info, "Section", "Validation## Session is completed", new RecordItemIndex(43));
            
            VerifyActionBarTitle("Session Completed");
            Delay.Milliseconds(0);
            
            // Step## Press Close session
            Report.Log(ReportLevel.Info, "Section", "Step## Press Close session", new RecordItemIndex(45));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Validation## Returns to the Customer List screen
            Report.Log(ReportLevel.Info, "Section", "Validation## Returns to the Customer List screen", new RecordItemIndex(47));
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
