///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The WithAudiogramRunP recording.
    /// </summary>
    [TestModule("14b26b66-ee5a-46ab-8a59-9178ffb446d4", ModuleType.Recording, 1)]
    public partial class WithAudiogramRunP : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static WithAudiogramRunP instance = new WithAudiogramRunP();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public WithAudiogramRunP()
        {
            FirstName = "WithAudi";
            LastName = "RunP";
            AUPoints = "500,40;1000,45;2000,50;4000,60";
            HIName = "Run P";
            Coupling = "Tip";
            Cluster = "P1";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static WithAudiogramRunP Instance
        {
            get { return instance; }
        }

#region Variables

        string _FirstName;

        /// <summary>
        /// Gets or sets the value of variable FirstName.
        /// </summary>
        [TestVariable("ce1291e5-8773-44cc-8607-19f128ef4f08")]
        public string FirstName
        {
            get { return _FirstName; }
            set { _FirstName = value; }
        }

        string _LastName;

        /// <summary>
        /// Gets or sets the value of variable LastName.
        /// </summary>
        [TestVariable("0e0ebd18-759a-4ae3-9307-e848ceebfb93")]
        public string LastName
        {
            get { return _LastName; }
            set { _LastName = value; }
        }

        string _AUPoints;

        /// <summary>
        /// Gets or sets the value of variable AUPoints.
        /// </summary>
        [TestVariable("13ea95a0-7cbb-4ab6-ab07-fc5ccd47e61f")]
        public string AUPoints
        {
            get { return _AUPoints; }
            set { _AUPoints = value; }
        }

        string _HIName;

        /// <summary>
        /// Gets or sets the value of variable HIName.
        /// </summary>
        [TestVariable("d9105cf5-5c62-407d-b59e-0d062c72937d")]
        public string HIName
        {
            get { return _HIName; }
            set { _HIName = value; }
        }

        string _Coupling;

        /// <summary>
        /// Gets or sets the value of variable Coupling.
        /// </summary>
        [TestVariable("af5ae7bd-4a1b-423e-854f-f5853e6a2f42")]
        public string Coupling
        {
            get { return _Coupling; }
            set { _Coupling = value; }
        }

        string _Cluster;

        /// <summary>
        /// Gets or sets the value of variable Cluster.
        /// </summary>
        [TestVariable("58dc45a8-a0de-42fc-af77-c8c349585bbe")]
        public string Cluster
        {
            get { return _Cluster; }
            set { _Cluster = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step##  Pre-Condition - Initial setup and Access code setup is done. Customer created with audiogram configured
            Report.Log(ReportLevel.Info, "Section", "Step##  Pre-Condition - Initial setup and Access code setup is done. Customer created with audiogram configured", new RecordItemIndex(0));
            
            TapOnRightButton("Tap on 'Settings'");
            Delay.Milliseconds(0);
            
            SwitchSettingUseMold(ValueConverter.ArgumentFromString<bool>("YesNo", "True"));
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            CreatePatient(LastName, FirstName);
            Delay.Milliseconds(0);
            
            SelectCustomerContinue();
            Delay.Milliseconds(0);
            
            CloseApp();
            Delay.Milliseconds(0);
            
            // Step## Open the app, goto List. Select the existing customer
            Report.Log(ReportLevel.Info, "Section", "Step## Open the app, goto List. Select the existing customer", new RecordItemIndex(7));
            
            StartApp();
            Delay.Milliseconds(0);
            
            SearchCustomer(FirstName);
            Delay.Milliseconds(0);
            
            SelectCustomer(LastName, FirstName);
            Delay.Milliseconds(0);
            
            // Step## Enter (Right), @500Hz, @1kHz, @2kHz, @4kHz.Press Done
            Report.Log(ReportLevel.Info, "Section", "Step## Enter (Right), @500Hz, @1kHz, @2kHz, @4kHz.Press Done", new RecordItemIndex(11));
            
            TapEnterAudiogram();
            Delay.Milliseconds(0);
            
            DrawAudiogramPoints("Right", AUPoints);
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Do you want to enter values for the \"right\" ear side too?");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("No");
            Delay.Milliseconds(0);
            
            // Validation## Audiogram is saved - Recommendation should be @HI , @coupling type & @Cluster
            Report.Log(ReportLevel.Info, "Section", "Validation## Audiogram is saved - Recommendation should be @HI , @coupling type & @Cluster", new RecordItemIndex(17));
            
            ValidateMonauralHISelected(HIName, "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected(Coupling, "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected(Cluster, "Right");
            Delay.Milliseconds(0);
            
            // Step## Press Send data to HI and Connect to HI
            Report.Log(ReportLevel.Info, "Section", "Step## Press Send data to HI and Connect to HI", new RecordItemIndex(21));
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.", new RecordItemIndex(22));
            
            TapOn("Send Data to Hearing Aid");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            // Step## Press Sound Comfort and Press OK
            Report.Log(ReportLevel.Info, "Section", "Step## Press Sound Comfort and Press OK", new RecordItemIndex(27));
            
            TapOn("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Step## Close session.
            Report.Log(ReportLevel.Info, "Section", "Step## Close session.", new RecordItemIndex(30));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Step## Reselect same customer
            Report.Log(ReportLevel.Info, "Section", "Step## Reselect same customer", new RecordItemIndex(32));
            
            SearchCustomer(FirstName);
            Delay.Milliseconds(0);
            
            SelectCustomer(LastName, FirstName);
            Delay.Milliseconds(0);
            
            // Step## Press audiogram tab and open the edit screen
            Report.Log(ReportLevel.Info, "Section", "Step## Press audiogram tab and open the edit screen", new RecordItemIndex(35));
            
            EditAudiogram();
            Delay.Milliseconds(0);
            
            // Step## Enter (Left), @500Hz, @1kHz, @2kHz, @4kHz.Press Done.
            Report.Log(ReportLevel.Info, "Section", "Step## Enter (Left), @500Hz, @1kHz, @2kHz, @4kHz.Press Done.", new RecordItemIndex(37));
            
            DrawAudiogramPoints("Left", AUPoints);
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Audiogram is saved and Recommendation is given  @HI, @Coupling type & @Cluster
            Report.Log(ReportLevel.Info, "Section", "Validation## Audiogram is saved and Recommendation is given  @HI, @Coupling type & @Cluster", new RecordItemIndex(40));
            
            ValidateMonauralHISelected(HIName, "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralCouplingSelected(Coupling, "Right");
            Delay.Milliseconds(0);
            
            ValidateMonauralClusterSelected(Cluster, "Right");
            Delay.Milliseconds(0);
            
            // Step## Check the cluster recommended in the overview screen and the cluster Highlighted in the sound profile screen
            Report.Log(ReportLevel.Info, "Section", "Step## Check the cluster recommended in the overview screen and the cluster Highlighted in the sound profile screen", new RecordItemIndex(44));
            
            // Validation## Should be the same bearing-"Suitable" tag and marked as the current selection
            Report.Log(ReportLevel.Info, "Section", "Validation## Should be the same bearing-\"Suitable\" tag and marked as the current selection", new RecordItemIndex(45));
            
            TapOn(HIName);
            Delay.Milliseconds(0);
            
            TapOn("Fit right ear with hearing aid");
            Delay.Milliseconds(0);
            
            ValidateSuitableHISelected(HIName, "Right");
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            BackAction();
            Delay.Milliseconds(0);
            
            ContinueWithLeftEar();
            Delay.Milliseconds(0);
            
            // Step## Press Send data to HI and Connect to HI for Left side
            Report.Log(ReportLevel.Info, "Section", "Step## Press Send data to HI and Connect to HI for Left side", new RecordItemIndex(52));
            
            // Validation## warning message is displayed as Selected sound profile has high amplification output.
            Report.Log(ReportLevel.Info, "Section", "Validation## warning message is displayed as Selected sound profile has high amplification output.", new RecordItemIndex(53));
            
            SendDataToHearingAid("Left");
            Delay.Milliseconds(0);
            
            ValidateALertMessage("Selected Sound Profile has high amplification output.");
            Delay.Milliseconds(0);
            
            ClickOnAlertMessage("OK");
            Delay.Milliseconds(0);
            
            ConnectHI();
            Delay.Milliseconds(0);
            
            SelectPage("Check Sound Comfort");
            Delay.Milliseconds(0);
            
            // Step## Press Sound Comfort and Press OK
            Report.Log(ReportLevel.Info, "Section", "Step## Press Sound Comfort and Press OK", new RecordItemIndex(59));
            
            SoundComfortOk();
            Delay.Milliseconds(0);
            
            // Step## Press Close session
            Report.Log(ReportLevel.Info, "Section", "Step## Press Close session", new RecordItemIndex(61));
            
            CloseSession();
            Delay.Milliseconds(0);
            
            // Validation## Returns to Customer list screen
            Report.Log(ReportLevel.Info, "Section", "Validation## Returns to Customer list screen", new RecordItemIndex(63));
            
            VerifyActionBarTitle("Client");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
