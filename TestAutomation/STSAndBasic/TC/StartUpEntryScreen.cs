///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STSAndBasic.TC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The StartUpEntryScreen recording.
    /// </summary>
    [TestModule("0bc9114f-c19f-4185-80e8-fc47840f334e", ModuleType.Recording, 1)]
    public partial class StartUpEntryScreen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the STSAndBasic.STSAndBasicRepository repository.
        /// </summary>
        public static STSAndBasic.STSAndBasicRepository repo = STSAndBasic.STSAndBasicRepository.Instance;

        static StartUpEntryScreen instance = new StartUpEntryScreen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public StartUpEntryScreen()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static StartUpEntryScreen Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Step## Launch the app and Accept and Continue the start up initial text
            Report.Log(ReportLevel.Info, "Section", "Step## Launch the app and Accept and Continue the start up initial text", new RecordItemIndex(0));
            
            StartApp();
            Delay.Milliseconds(0);
            
            AcceptAndContinueWelcomeScreen();
            Delay.Milliseconds(0);
            
            // Validation## Country selection screen is presented
            Report.Log(ReportLevel.Info, "Section", "Validation## Country selection screen is presented", new RecordItemIndex(3));
            
            VerifyActionBarTitle("Country");
            Delay.Milliseconds(0);
            
            // Step## Select the country location and click on done
            Report.Log(ReportLevel.Info, "Section", "Step## Select the country location and click on done", new RecordItemIndex(5));
            
            SelectCountry("Rest of World");
            Delay.Milliseconds(0);
            
            TapOnRightButton("Click on 'Done'");
            Delay.Milliseconds(0);
            
            // Validation## Access code screen is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Access code screen is displayed", new RecordItemIndex(8));
            
            VerifyActionBarTitle("Access Code");
            Delay.Milliseconds(0);
            
            ValidateAppRunning(ValueConverter.ArgumentFromString<bool>("isRunning", "True"));
            Delay.Milliseconds(0);
            
            // Step## Press Cancel
            Report.Log(ReportLevel.Info, "Section", "Step## Press Cancel", new RecordItemIndex(11));
            
            CancelAuthenticationScreen();
            Delay.Milliseconds(0);
            
            // Validation## App exits (only in Android)
            Report.Log(ReportLevel.Info, "Section", "Validation## App exits (only in Android)", new RecordItemIndex(13));
            
            ValidateAppRunning(ValueConverter.ArgumentFromString<bool>("isRunning", "False"));
            Delay.Milliseconds(0);
            
            // Step## Re launch the app again
            Report.Log(ReportLevel.Info, "Section", "Step## Re launch the app again", new RecordItemIndex(15));
            
            StartApp();
            Delay.Milliseconds(0);
            
            // Validation## Access code screen is displayed
            Report.Log(ReportLevel.Info, "Section", "Validation## Access code screen is displayed", new RecordItemIndex(17));
            
            VerifyActionBarTitle("Access Code");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
